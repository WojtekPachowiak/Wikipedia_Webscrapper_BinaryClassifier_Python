# -*- coding: utf-8 -*-
"""KlasyfikatorBinarny_2_StworzenieTestowanieModelów

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KfxJPr2fqM0oYFVKcisy3dYTHKq2YIF4
"""

import numpy as np
import pandas as pd

data_path = '<YOUR_PATH>/WP_badaniaKorpusowe.tsv'

df = pd.read_csv(data_path, sep = '\t')

type(df)

"""#PREPROCESSING"""

df.head()
df.shape

df['label'].value_counts()

#471 to artykuł bez treści
df[df["text"].isnull()].index.tolist()

df.dropna(inplace=True)

X = df['text']
y = df['label']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 420)

"""#Tfidf i swtorzenie modelów

"""

from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC
from sklearn.naive_bayes import MultinomialNB

text_clf = Pipeline([('tfidf', TfidfVectorizer()), ('clf', LinearSVC())])
text_clf_nb = Pipeline([('tfidf', TfidfVectorizer()), ('clf', MultinomialNB())])

text_clf.fit(X_train, y_train)
text_clf_nb.fit(X_train, y_train)

predictions = text_clf.predict(X_test)
predictions_nb = text_clf_nb.predict(X_test)

"""#METRYKI"""

from sklearn import metrics

metrics.confusion_matrix(y_test, predictions)

metrics.confusion_matrix(y_test, predictions_nb)

print(metrics.classification_report(y_test, predictions))

print(metrics.classification_report(y_test, predictions_nb))

metrics.f1_score(y_test, predictions_nb, average=None)

"""#MASOWE TESTY"""

import random

Fscores_svc = np.array([0,0],dtype='float64')
Fscores_nb = np.array([0,0],dtype='float64')
Acc_svc = 0
Acc_nb = 0
Avg_confusionMatrix_svc = np.zeros((2,2), dtype='float64')
Avg_confusionMatrix_nb = np.zeros((2,2), dtype='float64')

iterations = 30
for i in range(iterations):
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = i)

  text_clf_svc = Pipeline([('tfidf', TfidfVectorizer()), ('clf', LinearSVC())])
  text_clf_nb = Pipeline([('tfidf', TfidfVectorizer()), ('clf', MultinomialNB())])

  text_clf_svc.fit(X_train, y_train)
  text_clf_nb.fit(X_train, y_train)

  predictions_svc = text_clf.predict(X_test)
  predictions_nb = text_clf_nb.predict(X_test)

  Acc_svc += metrics.accuracy_score(y_test, predictions_svc)
  Acc_nb += metrics.accuracy_score(y_test, predictions_nb)
  Fscores_svc += metrics.f1_score(y_test, predictions_svc, average=None)
  Fscores_nb += metrics.f1_score(y_test, predictions_nb, average=None)
  Avg_confusionMatrix_svc += metrics.confusion_matrix(y_test, predictions_svc)
  Avg_confusionMatrix_nb += metrics.confusion_matrix(y_test, predictions_nb)

Acc_svc /= iterations
Acc_nb /= iterations
Fscores_svc /= iterations
Fscores_nb /= iterations
Avg_confusionMatrix_svc /= iterations
Avg_confusionMatrix_nb /= iterations

print("Accuracy of SVC:", Acc_svc.round(3))
print("Accuracy of NB:", Acc_nb.round(3))
print("F1 of SVC:", Fscores_svc.round(3))
print("F1 of NB:", Fscores_nb.round(3))

print("Average confusion matrix for SVC:")
Avg_confusionMatrix_svc.astype(int)

print("Average confusion matrix for NB:")
Avg_confusionMatrix_nb.astype(int)